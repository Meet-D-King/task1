# -*- coding: utf-8 -*-
"""task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EorgdDXwKQV9EEEsdVxQM6fQrOmuTgmw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm

sns.set_style('whitegrid')
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 100)

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('train.csv')
print("Dataset loaded successfully.")
display(df.head())

cols_fillna_none = ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType']
for col in cols_fillna_none:
    df[col] = df[col].fillna('None')

cols_fillna_zero = ['GarageYrBlt', 'GarageArea', 'GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath', 'MasVnrArea']
for col in cols_fillna_zero:
    df[col] = df[col].fillna(0)

df['LotFrontage'] = df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))

df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])

print("All missing values handled.")

plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
sns.histplot(df['SalePrice'], kde=True, bins=50)
plt.title('Original SalePrice Distribution')

df['SalePrice'] = np.log1p(df['SalePrice'])

plt.subplot(1, 2, 2)
sns.histplot(df['SalePrice'], kde=True, bins=50)
plt.title('Log-Transformed SalePrice')
plt.show()

df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']
df['HouseAge'] = df['YrSold'] - df['YearBuilt']
df['RemodAge'] = df['YrSold'] - df['YearRemodAdd']
df['TotalBath'] = df['FullBath'] + (0.5 * df['HalfBath']) + df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath'])

df.drop(['Id'], axis=1, inplace=True)

print("New features created successfully.")

qual_map = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5, 'None': 0}
ordered_cols = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']
for col in ordered_cols:
    df[col] = df[col].map(qual_map).fillna(0)

nominal_cols = df.select_dtypes(include=['object']).columns
df = pd.get_dummies(df, columns=nominal_cols, drop_first=True)

print(f"Dataset shape after encoding: {df.shape}")

from sklearn.preprocessing import StandardScaler

numerical_cols = df.select_dtypes(include=np.number).columns.tolist()
numerical_cols.remove('SalePrice')

scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])

print("Numerical features standardized.")
display(df.head())

print("Preprocessing complete. The data is ready for model training.")
print("\nFinal dataset shape:", df.shape)
print("\nFinal data summary:")
display(df.describe())

